version: 2.1

jobs:
  test-linux: &test-linux-template
    parameters:
      python-version:
        type: string
      integration-test-python-version:
        type: string

    docker:
      - image: cimg/python:<< parameters.python-version >>

    steps:
      - checkout

      - run:
          name: create virtual env and install dependencies
          command: |
            python -m venv env
            . env/bin/activate
            pip install -U pip setuptools
            pip install .     # install dwave-system to break cycle created by dwave-drivers in requirements
            pip install -r requirements.txt -r tests/requirements.txt

      - run: &run-tests-template
          name: run unittests
          command: |
            . env/bin/activate
            if [[ << parameters.integration-test-python-version >> != << parameters.python-version >> ]]; then
              export SKIP_INT_TESTS=1
            fi
            coverage run -m unittest discover

      - run:
          name: create virtual env and install latest dependencies
          command: |
            rm -rf env/
            python -m venv env
            . env/bin/activate
            pip install -U pip setuptools
            pip install -r tests/requirements.txt
            pip install .[drivers] -I --no-cache-dir --extra-index-url https://pypi.dwavesys.com/simple

      - run: *run-tests-template

      - run: &codecov-template
          name: codecov
          command: |
            . env/bin/activate
            codecov

  test-doctest:
    docker:
      - image: cimg/python:3.9

    steps:
      - checkout

      - run:
          name: create virtual env and install dependencies
          command: |
            python -m venv env
            . env/bin/activate
            pip install -r requirements.txt -r docs/requirements.txt

      - run:
          name: doctest
          command: |
            . env/bin/activate
            make -C docs/ html doctest

      - run: 
          name: linkcheck
          command: |
            . env/bin/activate
            make -C docs/ linkcheck

  test-osx:
    parameters:
      python-version:
        type: string
      integration-test-python-version:
        type: string

    resource_class: macos.x86.medium.gen2   

    macos:
      xcode: "14.3.0"

    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1

    steps:
      - checkout

      - run:
          name: install pyenv
          command: |
            brew install pyenv

      - restore_cache:
          keys:
            - pyenv-{{ .Environment.CIRCLE_JOB }}-xcode-14.3.0

      - run:
          name: install python
          command: |
            pyenv install << parameters.python-version>> -s

      - save_cache:
          paths:
            - ~/.pyenv
          key: pyenv-{{ .Environment.CIRCLE_JOB }}-xcode-14.3.0

      - run:
          name: create virtual env and install dependencies
          command: |
            eval "$(pyenv init --path 2>/dev/null || true)"
            eval "$(pyenv init -)"
            pyenv shell << parameters.python-version >>
            python -m venv env
            . env/bin/activate
            pip install -U pip
            pip install .     # install dwave-system to break cycle created by dwave-drivers in requirements
            pip install -r requirements.txt -r tests/requirements.txt

      - run: *run-tests-template
      - run: *codecov-template

  deploy:
    docker:
      - image: cimg/python:3.9

    steps:
      - checkout

      - run:
          name: create virtual env and install dependencies
          command: |
            python -m virtualenv env
            . env/bin/activate
            pip install .     # install dwave-system to break cycle created by dwave-drivers in requirements
            pip install -r requirements.txt
            pip install twine wheel

      - run:
          name: verify version matches tag
          command: |
            . env/bin/activate
            [[ "$(pip show dwave-system 2>/dev/null | grep Version)" == "Version: $CIRCLE_TAG" ]]

      - run:
          name: build sdist and bdist
          command: |
            . env/bin/activate
            python setup.py sdist bdist_wheel

      - run:
          name: upload
          command: |
            . env/bin/activate
            twine upload -u $PYPI_USERNAME -p $PYPI_PASSWORD --skip-existing ./dist/*

workflows:
  test:
    jobs:
      - test-linux:
          name: test-linux-<< matrix.python-version >>
          matrix:
            parameters:
              python-version: &python-versions ["3.8.9", "3.9.4", "3.10.0", &latest-python "3.11.0"]
              integration-test-python-version: &integration-python-versions [*latest-python]
      - test-osx:
          name: test-osx-<< matrix.python-version >>
          matrix:
            parameters:
              python-version: *python-versions
              integration-test-python-version: *integration-python-versions
      - test-doctest

  deploy:
    jobs:
      - deploy:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*(\.dev([0-9]+)?)?$/
            branches:
              ignore: /.*/
